import { audit } from './audit';
import { auditTime } from './auditTime';
import { buffer } from './buffer';
import { bufferCount } from './bufferCount';
import { bufferTime } from './bufferTime';
import { bufferToggle } from './bufferToggle';
import { bufferWhen } from './bufferWhen';
import { catchError } from './catchError';
import { combineAll } from './combineAll';
import { combineLatest } from './combineLatestReplaced';
import { concat } from './concatReplaced';
import { concatAll } from './concatAll';
import { concatMap } from './concatMap';
import { concatMapTo } from './concatMapTo';
import { count } from './count';
import { debounce } from './debounce';
import { debounceTime } from './debounceTime';
import { defaultIfEmpty } from './defaultIfEmpty';
import { delay } from './delay';
import { delayWhen } from './delayWhen';
import { dematerialize } from './dematerialize';
import { distinct } from './distinct';
import { distinctUntilChanged } from './distinctUntilChanged';
import { distinctUntilKeyChanged } from './distinctUntilKeyChanged';
import { elementAt } from './elementAt';
import { endWith } from './endWith';
import { every } from './every';
import { exhaust } from './exhaust';
import { exhaustMap } from './exhaustMap';
import { expand } from './expand';
import { filter } from './filter';
import { finalize } from './finalize';
import { find } from './find';
import { findIndex } from './findIndex';
import { first } from './first';
import { groupBy } from './groupBy';
import { ignoreElements } from './ignoreElements';
import { isEmpty } from './isEmpty';
import { last } from './last';
import { map } from './map';
import { mapTo } from './mapTo';
import { materialize } from './materialize';
import { max } from './max';
import { merge } from './mergeReplaced';
import { mergeAll } from './mergeAll';
import { mergeMap, flatMap } from './mergeMap';
import { mergeMapTo } from './mergeMapTo';
import { mergeScan } from './mergeScan';
import { min } from './min';
import { multicast } from './multicast';
import { observeOn } from './observeOn';
import { onErrorResumeNext } from './onErrorResumeNextReplaced';
import { pairwise } from './pairwise';
import { partition } from './partitionReplaced';
import { pluck } from './pluck';
import { publish } from './publish';
import { publishBehavior } from './publishBehavior';
import { publishLast } from './publishLast';
import { publishReplay } from './publishReplay';
import { race } from './raceReplaced';
import { reduce } from './reduce';
import { repeat } from './repeat';
import { repeatWhen } from './repeatWhen';
import { retry } from './retry';
import { retryWhen } from './retryWhen';
import { refCount } from './refCount';
import { sample } from './sample';
import { sampleTime } from './sampleTime';
import { scan } from './scan';
import { sequenceEqual } from './sequenceEqual';
import { share } from './share';
import { shareReplay } from './shareReplay';
import { single } from './single';
import { skip } from './skip';
import { skipLast } from './skipLast';
import { skipUntil } from './skipUntil';
import { skipWhile } from './skipWhile';
import { startWith } from './startWith';
import { subscribeOn } from './subscribeOn';
import { switchAll } from './switchAll';
import { switchMap } from './switchMap';
import { switchMapTo } from './switchMapTo';
import { take } from './take';
import { takeLast } from './takeLast';
import { takeUntil } from './takeUntil';
import { takeWhile } from './takeWhile';
import { tap } from './tap';
import { throttle } from './throttle';
import { throttleTime } from './throttleTime';
import { throwIfEmpty } from './throwIfEmpty';
import { timeInterval } from './timeInterval';
import { timeout } from './timeout';
import { timeoutWith } from './timeoutWith';
import { timestamp } from './timestamp';
import { toArray } from './toArray';
import { window } from './window';
import { windowCount } from './windowCount';
import { windowTime } from './windowTime';
import { windowToggle } from './windowToggle';
import { windowWhen } from './windowWhen';
import { withLatestFrom } from './withLatestFrom';
import { zip } from './zipReplaced';
import { zipAll } from './zipAll';
//# sourceMappingURL=index.js.map


export const operators = {audit,auditTime,buffer,bufferCount,bufferTime,bufferToggle,bufferWhen,catchError,combineAll,combineLatest,concat,concatAll,concatMap,concatMapTo,count,debounce,debounceTime,defaultIfEmpty,delay,delayWhen,dematerialize,distinct,distinctUntilChanged,distinctUntilKeyChanged,elementAt,endWith,every,exhaust,exhaustMap,expand,filter,finalize,find,findIndex,first,groupBy,ignoreElements,isEmpty,last,map,mapTo,materialize,max,merge,mergeAll,mergeMap, flatMap,mergeMapTo,mergeScan,min,multicast,observeOn,onErrorResumeNext,pairwise,partition,pluck,publish,publishBehavior,publishLast,publishReplay,race,reduce,repeat,repeatWhen,retry,retryWhen,refCount,sample,sampleTime,scan,sequenceEqual,share,shareReplay,single,skip,skipLast,skipUntil,skipWhile,startWith,subscribeOn,switchAll,switchMap,switchMapTo,take,takeLast,takeUntil,takeWhile,tap,throttle,throttleTime,throwIfEmpty,timeInterval,timeout,timeoutWith,timestamp,toArray,window,windowCount,windowTime,windowToggle,windowWhen,withLatestFrom,zip,zipAll}